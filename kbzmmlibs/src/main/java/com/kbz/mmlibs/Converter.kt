package com.kbz.mmlibs

//From the Rabbit: Credit
object Converter {
    private val uzRules = mapOf(
        "င်္" to "ၤ",
        "္တွ" to "႖",
        "ါ်" to "ၚ",
        "ိံ" to "ႎ",
        "၎င်း" to "၎",
        "[ဥဉ](?=္)" to "ၪ",
        "ဉ(?=[ုူ])" to "ဥ",
        "[ဥဉ](?=[့]?[်])" to "ဥ",
        "ည(?=[္ွ])" to "ၫ",
        "(္[က-အ])(ိ){0,1}ု" to "$1$2ဳ",
        "(္[က-အ])ူ" to "$1ဴ",
        "န(?=[ိီု်]?[ူွှု္])" to "ႏ",
        "န(?=်ု )" to "ႏ",
        "နြ" to "ႏြ",
        "္က" to "ၠ",
        "္ခ" to "ၡ",
        "္ဂ" to "ၢ",
        "္ဃ" to "ၣ",
        "္စ" to "ၥ",
        "္ဆ" to "ၦ",
        "္ဇ" to "ၨ",
        "္ဈ" to "ၩ",
        "္ဋ" to "ၬ",
        "ဋ္ဌ" to "႒",
        "္ဌ" to "ၭ",
        "ဍ္ဍ" to "ၮ",
        "ဍ္ဎ" to "ၯ",
        "္ဏ" to "ၰ",
        "္တ" to "ၱ",
        "္ထ" to "ၳ",
        "္ဒ" to "ၵ",
        "္ဓ" to "ၶ",
        "္[နႏ]" to "ၷ",
        "္ပ" to "ၸ",
        "္ဖ" to "ၹ",
        "္ဗ" to "ၺ",
        "္ဘ" to "ၻ",
        "္မ" to "ၼ",
        "္လ" to "ႅ",
        "ဿ" to "ႆ",
        "ွှ" to "ႊ",
        "(ၤ)([က-အ])([ျြ]?)ိ" to "$2$3ႋ",
        "(ၤ)([က-အ])([ျြ]?)ီ" to "$2$3ႌ",
        "(ၤ)([က-အ])([ျြ]?)ံ" to "$2$3ႍ",
        "(ၤ)([က-အ၀-၉])([ျြ]?)([ေ]?)" to "$2$3$4$1",
        "ရ(?=([ိီ]?)[ုူွႊ])" to "႐",
        "ဏ္ဍ" to "႑",
        "ဋ္ဋ" to "႗",
        "([က-အႏဩၪၮၯႆ႐႑႒႗႖])([ၠ-ၩၬၭၰ-ၼႅႊ])?([ျ-ှ]*)?ေ" to "ေ$1$2$3",
        "ြှ" to "ြႇ",
        "([က-အႏဩ])([ၠ-ၩၬၭၰ-ၼႅ])?(ြ)" to "$3$1$2",
        "်" to "္",
        "ျ" to "်",
        "ြ" to "ျ",
        "ွ" to "ြ",
        "ှ" to "ွ",
        "([^်ည])ွ([ိီ]?)ု" to "$1ႈ$2",
        "([ရ်ြႊႈ႐])([ူွ])?([ဲံ္ိီႋႌႍႎ]?)(ု)?့" to "$1$2$3$4႕",
        "([ုနူွ])([ဲံ္ိီႋႌႍႎ]?)့" to "$1$2႔",
        "([ျ])([က-အ])([ႇ]?)([ံိီႋႌႍႎ]?)ု" to "$1$2$3$4ဳ",
        "([ျ])([က-အ])([ႇ]?)([ံိီႋႌႍႎ]?)ူ" to "$1$2$3$4ဴ",
        "([်ြညဈဋဌဍဠဥ])([ွ]?)([ံိီႋႌႍႎ]?)ု" to "$1$2$3ဳ",
        "([်ြညဈဋဌဍဠဥ])(ွ?)([ံိီႋႌႍႎ]?)ူ" to "$1$2$3ဴ",
        "([ညဠဉ])ွ" to "$1ႇ",
        "ွူ" to "ႉ",
        "ျ([ကဃဆဏတထဘယလယသဟ])" to "ၾ$1",
        "ၾ([ကဃဆဏတထဘယလယသဟ])([ြႊ])([ဲံိီႋႌႍႎ])" to "ႄ$1$2$3",
        "ၾ([ကဃဆဏတထဘယလယသဟ])([ြႊ])" to "ႂ$1$2",
        "ၾ([ကဃဆဏတထဘယလယသဟ])([ဳဴ]?)([ဲံိီႋႌႍႎ])" to "ႀ$1$2$3",
        "ျ([က-အ])([ြႊ])([ဲံိီႋႌႍႎ])" to "ႃ$1$2$3",
        "ျ([က-အ])([ြႊ])" to "ႁ$1$2",
        "ျ([က-အ])([ဳဴ]?)([ဲံိီႋႌႍႎ])" to "ၿ$1$2$3",
        "်ွ" to "ွ်",
        "်([ြႊ])" to "$1ၽ",
        "([ဳဴ])(ံ?)႔" to "$1$2႕",
        "ႏၱ" to "ႏၲ",
        "ႏၳ" to "ႏၴ",
        "([က-အ])([ၻၦ])ာ" to "$1ာ$2",
        "ာ([ၻၦ])့" to "ာ$1႔",
        "၇((?=[က-အ]္)|(?=[ာ-ူဲံ-းြွ]))" to "ရ"
    )

    private val zuRules = mapOf(
        "([ိီွု့႕])\\1+" to "$1",
        "​" to "",
        "ွြ" to "ႊ",
        "(ွ|ႇ)" to "ှ",
        "ြ" to "ွ",
        "(ျ|ၾ|ၿ|ႀ|ႁ|ႂ|ႃ|ႄ)" to "ြ",
        "(်|ၽ)" to "ျ",
        "္" to "်",
        "(ၦ|ၧ)" to "္ဆ",
        "ၪ" to "ဉ",
        "ၫ" to "ည",
        "ၬ" to "္ဋ",
        "ၭ" to "္ဌ",
        "ၮ" to "ဍ္ဍ",
        "ၯ" to "ဍ္ဎ",
        "ၰ" to "္ဏ",
        "(ၱ|ၲ)" to "္တ",
        "ၠ" to "္က",
        "ၡ" to "္ခ",
        "ၢ" to "္ဂ",
        "ၣ" to "္ဃ",
        "ၥ" to "္စ",
        "ၨ" to "္ဇ",
        "ၩ" to "္ဈ",
        "(ၳ|ၴ)" to "္ထ",
        "ၵ" to "္ဒ",
        "ၶ" to "္ဓ",
        "ၷ" to "္န",
        "ၸ" to "္ပ",
        "ၹ" to "္ဖ",
        "ၺ" to "္ဗ",
        "ၼ" to "္မ",
        "ႅ" to "္လ",
        "ဳ" to "ု",
        "ဴ" to "ူ",
        "ဿ" to "ူ",
        "ႆ" to "ဿ",
        "ံႈ" to "ႈံ",
        "ႈ" to "ှု",
        "ႉ" to "ှူ",
        "ႊ" to "ွှ",
        "ျၤ" to "ၤျ",
        "ြ([က-အ])([ၤႋႍ])" to "$1ြ$2",
        "(ေ)?([က-အ၀-၉])(ြ)?ၤ" to "င်္$1$2$3",
        "(ေ)?([က-အ])(ျ|ြ)?ႋ" to "င်္$1$2$3ိ",
        "(ေ)?([က-အ])(ျ)?ႌ" to "င်္$1$2$3ီ",
        "(ေ)?([က-အ])([ျြ])?ႍ" to "င်္$1$2$3ံ",
        "ႎ" to "ိံ",
        "ႏ" to "န",
        "႐" to "ရ",
        "႑" to "ဏ္ဍ",
        "႒" to "ဋ္ဌ",
        "မာ(ၻ|႓)" to "မ္ဘာ",
        "(ၻ|႓)" to "္ဘ",
        "(႔|႕)" to "့",
        "([က-အ])့ဲ" to "$1ဲ့",
        "႖" to "္တွ",
        "႗" to "ဋ္ဋ",
        "ြ([က-အ])([က-အ])?" to "$1ြ$2",
        "([က-အ])ြ်" to "ြ$1်",
        "၇(?=[ာ-ူဲံ-းွး])" to "ရ",
        "ေ၇" to "ေရ",
        "၀(ီ|ု|ို|ူ|ံ|ွ|ှ)" to "ဝ$1",
        "([^၀၁၂၃၄၅၆၇၈၉])၀ါ" to "$1ဝါ",
        "([၀၁၂၃၄၅၆၇၈၉])၀ါ(?!း)" to "$1ဝါ",
        "^၀(?=ါ)" to "ဝ",
        "၀ိ(?! ?/)" to "ဝိ",
        "([^၀-၉])၀([^၀-၉ ]|[၊။])" to "$1ဝ$2",
        "([^၀-၉])၀(?=[\\f\n\r])" to "$1ဝ",
        "([^၀-၉])၀$" to "$1ဝ",
        "ေ([က-အဿ])(ှ)?(ျ)?" to "$1$2$3ေ",
        "([က-အ])ေ([ျြွှ]+)" to "$1$2ေ",
        "ဲွ" to "ွဲ",
        "([ိီ])ျ" to "ျ$1",
        "ွျ" to "ျွ",
        "့်" to "့်",
        "ု(ိ|ီ|ံ|့)ု" to "ု$1",
        "(ု|ူ)(ိ|ီ)" to "$2$1",
        "(ှ)(ျ|ြ)" to "$2$1",
        "ဥ(?=[့]?[်ာ])" to "ဉ",
        "ဦ" to "ဦ",
        "စျ" to "ဈ",
        "ံ(ု|ူ)" to "$1ံ",
        "ေ့ှ" to "ှေ့",
        "ေှာ" to "ှော",
        "ၚ" to "ါ်",
        "ေျှ" to "ျှေ",
        "(ိ|ီ)(ွ|ှ)" to "$2$1",
        "ာ္([က-အ])" to "္$1ာ",
        "္ြ်္([က-အ])" to "်္$1ြ",
        "ြ္([က-အ])" to "္$1ြ",
        "ံ္([က-အ])" to "္$1ံ",
        "၎" to "၎င်း",
        "၀(ါ|ာ|ံ)" to "ဝ$1",
        "ဥ္" to "ဉ္",
        "([က-အ])ြေွ" to "$1ြွေ",
        "([က-အ])ျေွ(ှ)?" to "$1ျွ$2ေ",
        "([က-အ])ွေျ" to "$1ျွေ",
        "([က-အ])ေ(္[က-အ]ွ?)" to "$1$2ေ",
        "း်" to "်း",
        "ိ်|်ိ" to "ိ",
        "ို်" to "ို",
        " ့" to "့",
        "့ံ" to "ံ့",
        "[ိ]+" to "ိ",
        "[်]+" to "်",
        "[ွ]+" to "ွ",
        "[့]+" to "့",
        "[ီ]+" to "ီ",
        "ိီ|ီိ" to "ီ",
        "ုိ" to "ို",
        "့့" to "့",
        "ဲဲ" to "ဲ",
        "၄င်း" to "၎င်း",
        "([ိီ])္([က-အ])" to "္$2$1",
        "(ြေ)္([က-အ])" to "္$2$1",
        "ံွ" to "ွံ",
        "၇((?=[က-အ]်)|(?=[ာ-ူဲံ-းွှ]))" to "ရ"
    )

    fun uniToZg(input: String): String {
        return convert(uzRules, input)
    }

    fun zgToUni(input: String): String {
        return convert(zuRules, input)
    }

    private fun convert(rule: Map<String, String>, input: String): String {
        var output = input
        rule.forEach { (from, to) ->
            val reg = from.toRegex()
            output = output.replace(reg, to)
        }
        return output
    }
}